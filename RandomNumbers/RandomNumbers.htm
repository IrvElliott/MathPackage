<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<title>RANDOM NORMAL FUNCTION</title>
</head>

<body>

<p> RANDOM NUMBERS</p>
<p>Random numbers are used in the simulation of events that are random. For
example, someone may need to design a piece of equipment that will work under
all kinds of conditions. A computer program could then be designed to simulate
the functioning of the device under the influence of a random barrage of all
kinds of conditions. Some other examples: random numbers can also be used to aid
in generating music, studying weather patterns and testing armament control
systems. </p>
<p>Some familiar methods of generating random numbers are the following: rolling
dice, spinning a casino wheel, shuffling and dealing cards and drawing paper
slips out of a hat. Of course, these require manual operations; the goal of this
section is to present methods of generating random number sequences by using a
computer. </p>
<p>There are two types of computer-generated random number sequences: (1) the
evenly-distribution type in which the set of generated numbers are evenly
distributed over a value range, and (2) the &quot;Gaussian&quot; type in which
the distribution of the numbers over the range follows the bell-shaped
&quot;normal distribution&quot; probability curve, shown in Figure x. The
Gaussian type is used, for example, to simulate bullets hitting a target; more
populous in the center of the bullseye and less in the areas farther from the
center of the target. Usually, a sequence of random numbers is generated by a
computer function. First, the function is called in a &quot;preset&quot; mode; a
&quot;seed&quot; value is used to specify a starting value. During a simulation,
the function is called many times in a second mode to provide a value for the
random sequence. </p>
<p>PSEUDO-RANDOM NUMBERS</p>
<p>Computer generated random numbers are not exactly
random. It is possibly to use a series&nbsp; of calls to a particular random
number function twice and to obtain the same sequence of
numbers. This is both a disadvantage and an advantage. Generation of identical
sequences may be required for some applications. Another reason that the values
are not really random is that generation by a computer starts by producing a limited sequence of
integer numbers and then these are mapped onto a real number sequence, which
is somewhat like enlarging a digital photograph so that the pixels appear. The
mapping results in a number of small gaps in the distribution pattern. For these
reasons, computer-generated random numbers are called &quot;pseudo-random
numbers&quot;. One method of avoiding this, not described here, is to incorporate special devices
that produce random sequences from ambient noise or from sub-atomic particle
movements. </p>
<p>GENERATION OF EVENLY-DISTRIBUTED PSEUDO-RANDOM NUMBERS</p>
<p>Imagine that we have a wheel resembling a casino &quot;wheel of
fortune&quot;, but having several thousand positions labeled with positive
integer values that are in the range of 1 through n . One can spin the wheel
and, when the wheel stops, the clicking mechanism space will show a random
integer R that is in that range. Imagine that each spin is precisely controlled
such that each causes the wheel to advance by m, the same number of positions.
For certain values of m and n, repetitive spins will provide a series of n random values.
There are values of m and n that should be avoided. If m is a factor of n, repetitive spins
will only generate a series of n/m values.</p>
<p>One method of generating a pseudo-random numbers is shown in Figure 1. The
wheel concept is implemented by using a number of bits on the right end of the
accumulator as a modular counter. If p bits are used, the modulus of the counter
iis 2 to the power p. The spinning concept&nbsp; is implemented by multiplying
the current accumulator value by a value m&nbsp; that is not a factor of the
modulus. After each multiplication,&nbsp; the count is converted to a p-bit
modular count by performing an AND operation with a mask consisting of p
&quot;1&quot; bits. The count variable should be in global storage. To use a
sequence of random integers, one would make an initial call with a
&quot;seed&quot; value that will provide the first count then, for subsequent
counts, call the function with a zero argument.</p>
<p>Usually, random numbers used in a simulation are real numbers that are in a
particular range; for example, floating-point 0 through floating-point 1.&nbsp;
To obtain this, each integer random number R must be &quot;mapped&quot; to a
value that fits that desired range.</p>
<p><img border="0" src="Randfunc.jpg" width="627" height="365"></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Figure 1.&nbsp; Real Random Number Function</p>

<p>&nbsp;</p>

<p>RANDOM NUMBERS WITH GAUSSIAN DISTRIBUTION&nbsp;</p>
<p>For some simulations, it is desirable to use a sequence of random numbers
that are distributed in a certain manner. For example, each random number may
represent a shot at a target. When one is&nbsp; shooting at a target, errors
occur and the holes from the shots are usually distributed in a
&quot;normal&quot; fashion; i.e., a pattern that is dense near the center of the
target and sparse around the edges. A graph showing the distance from the center
vs. the number of holes would normally be bell-shaped, as shown in Figure 2.</p>
<p align="center"><img border="0" src="Rnorm1.jpg" width="659" height="500"></p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Figure 2. Normal Distribution Curve</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="left">To simulate shots at a target, one could use a random number
generator to insert an error into each shot; however, the standard random number
generator produces values that are (almost) equally distributed over a certain range,
such as 0 through 1. Instead, a random normal function can be used to obtain a
standard bell-shaped distribution, as shown in the figure. The method of
creating such a function is described here.</p>
<p align="left">The formula for the bell-shaped curve is as follows:</p>
<p align="left"><img border="0" src="BellFunc.jpg" width="305" height="89"></p>
<p align="left">This formula is for a &quot;standard deviation&quot;, or
&quot;sigma&quot; of the value 1. Sigma is a measure of the error in a process.
It is obtained by adding the squares of the errors, dividing by the number or
executions, then taking the square root of that. The formula for sigma is as
follows:</p>
<p align="left"><img border="0" src="SigmaFunc.jpg" width="546" height="215"></p>
<p align="left">In the bell-shaped graph, the numbers on the horizontal axis are
sigma values. The area between sigma -1 and +1 represents 68.2 percent of the
errors, If a different sigma is required for a simulation, each output from a
random normal function must be multiplied by the desired sigma value.The next figure is a graph showing the relationship between each
input value R and each output Rn. For each horizontal increment of the R intput,
the slope of the curve determines the resulting range of the output values. The
output is distributed sparsely if the slope is steep or densely if the curve is
almost flat.</p>
<p align="left"><img border="0" src="Rnorm2.jpg" width="512" height="379">&nbsp;</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Figure 3.&nbsp; Plot of Function
to Convert Random Number into Gaussian Random Number</p>
<p align="left">The reason for the y values on this curve can be explained if
the bell curve is placed vertically on the left axis, as in Figure 4. If one does a step-by-step integration of the bell curve as a function
of y, each point on the normal curve is at y equal to the percentage of the
total curve area and at x equal to the percentage of the random number input.</p>
<p align="left"><img border="0" src="Theory.jpg" width="787" height="451"></p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Figure 4. Generation of the Figure 2 Curve</p>
<p align="left">To determine the x and y values of the Rnorm function, one can
use a spread sheet program. One column would be evenly-incremented Y values from
-6 to +6. Another column would be Z equal to the the step-by-step integral of
the bell shaped curve, using Y as the dependent variable. Fortunately, for the y
range -6 to +6, the Z values are equal to the desired X values!</p>
<p align="left">Next, there are two methods of creating a computer function for
Rnorm. One way would be to fit a mathematical expression to the x and y points.
The doubly-curved graph is difficult to express as a simple polynomial in powers
of x.</p>
<p align="left">Another way is to use interpolation to alter the x and y values
such that the x's are evenly spaced then insert the values as a table into the
Rnorm function. Then, the incoming random number r can be simply converted into
a table index i. The x and y table values from table lines i and i+1 can then be
used to determine the proper y value by interpolation. </p>
<p align="left">One advantage of the table method is that it can be used to
alter the distribution of the output values. For example, if the event being
simulated tends to err to one side, a different x-y table could be
constructed.&nbsp;&nbsp;&nbsp;&nbsp; </p>
<p align="left">For a symmetric distribution, another programming
trick is to use just&nbsp; one-half of the table values: those for the x range 0
to .5. If the incoming value r is greater than 5, the x value is taken as 1-.5
and used to find y, then the normal random value is equal to 6-y. The table for
this version and the resulting normal random distribution are shown in the
following table and figure.</p>
<p align="left"><img border="0" src="Table.jpg" width="304" height="272"><img border="0" src="rnorm.jpg" width="658" height="288"></p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Figure 5. Distribution of&nbsp; Values from Outputs of Gaussian Random Number
Generator</p>
<p align="left">The curve departs from the bell-shaped normal curve because the
input values from the Pseudo-Random generator were not truly evenly distributed
</p>

</body>

</html>
